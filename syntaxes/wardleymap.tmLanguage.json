{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "WardleyMap",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"match": "(evolution|note|anchor|annotations|annotation|component|market|submap|title|style|outsource|build|product|buy|pipeline|ecosystem)(\\s*[-+\\'\";a-zA-Z0-9\\s*]+)",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"match": "(x-axis)(\\s*[-+\\'\";a-zA-Z0-9\\s*]+)(\\-\\>)(\\s*[-+\\'\";a-zA-Z0-9\\s*]+)(\\-\\>)(\\s*[-+\\'\";a-zA-Z0-9\\s*]+)(\\-\\>)(\\s*[-+\\'\";a-zA-Z0-9\\s*]+)",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"name": "keyword.operator.assignment.js"
						},
						"4": {
							"name": "entity.name.function"
						},
						"5": {
							"name": "keyword.operator.assignment.js"
						},
						"6": {
							"name": "entity.name.function"
						},
						"7": {
							"name": "keyword.operator.assignment.js"
						},
						"8": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"match": "(y-axis)(\\s*[-+\\'\";a-zA-Z0-9\\s*]+)(\\-\\>)(\\s*[-+\\'\";a-zA-Z0-9\\s*]+)(\\-\\>)(\\s*[-+\\'\";a-zA-Z0-9\\s*]+)",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"name": "keyword.operator.assignment.js"
						},
						"4": {
							"name": "entity.name.function"
						},
						"5": {
							"name": "keyword.operator.assignment.js"
						},
						"6": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"match": "(evolve)(\\s*[a-zA-Z0-9\\s*]+)(\\d+(?:\\.\\d{1,})*)",
					"captures": {
					  "1": {
						"name": "storage.type"
					  },
					  "2": {
						  "name": "entity.name.function"
					  },
					  "3": {
						"name": "constant.numeric.skinparam.keyword.source.wardleymap"
					  }
					}
				},
				{
					"match": "(evolve)(\\s*[a-zA-Z0-9\\s*]+)(\\-\\>)?(\\s*[a-zA-Z0-9\\s*]+)?(\\d+(?:\\.\\d{1,})*)",
					"captures": {
					  "1": {
						"name": "storage.type"
					  },
					  "2": {
						  "name": "entity.name.function"
					  },
					  "3": {
						"name": "keyword.operator.assignment.js"
					  },
					  "4": {
						"name": "entity.name.function"
					  },
					  "5": {
						"name": "constant.numeric.skinparam.keyword.source.wardleymap"
					  }
					}
				},				  
				{
					"match": "(label)(\\s*\\[)(-*\\d+)(\\,\\s*)(-*\\d+)(\\])",
					"captures": 
					{
					  "1": {
						"name": "storage.type"
					  },
					  "2": {
						"name": "punctuation.paren.open"
					  },
					  "3": {
						"name": "constant.numeric.skinparam.keyword.source.wardleymap"
					  },
					  "4": {
						"name": "punctuation.paren.open"
					  },
					  "5": {
						"name": "constant.numeric.skinparam.keyword.source.wardleymap"
					  },
					  "6": {
						"name": "punctuation.paren.clode"
					  }
					}
				},
				  {
					"match": "(\\[*)(\\[)(\\d+(?:\\.\\d{1,})*|\\.\\d{1,}*)(\\,\\s*)(\\d+(?:\\.\\d{1,})*|\\.\\d{1,}*)(\\])(\\]*)",
					"captures": 
					{
					  "1": {
						"name": "punctuation.paren.open"
					  },
					  "2": {
						"name": "punctuation.paren.open"
					  },
					  "3": {
						"name": "constant.numeric.skinparam.keyword.source.wardleymap"
					  },
					  "4": {
						"name": "punctuation.paren.open"
					  },
					  "5": {
						"name": "constant.numeric.skinparam.keyword.source.wardleymap"
					  },
					  "6": {
						"name": "punctuation.paren.close"
					  },
					  "7": {
						"name": "punctuation.paren.close"
					  }
					}
				},
				{
					"match": "(inertia)",
					"captures": {
						"1": {
							"name": "storage.type"
						}
					}
				},
				{
					"match": "(\\s*[a-zA-Z0-9\\s*]+)(\\-\\>)(\\s*[a-zA-Z0-9\\s*]+)",
					"captures": {
						"1": {
							"name": "entity.name.function"
						},
						"2": {
							"name": "keyword.operator.assignment.js"
						},
						"3": {
							"name": "entity.name.function"
						}
					}
				},
				{
					"match": "(pioneers|settlers|townplanners)(\\s*\\[)(\\d+(?:\\.\\d{1,})*|\\.\\d{1,}*)(\\,\\s*)(\\d+(?:\\.\\d{1,})*|\\.\\d{1,}*)(\\,\\s*)(\\d+(?:\\.\\d{1,})*|\\.\\d{1,}*)(\\,\\s*)(\\d+(?:\\.\\d{1,})*|\\.\\d{1,}*)(\\])",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "punctuation.paren.open"
						},
						"3": {
							"name": "constant.numeric.skinparam.keyword.source.wardleymap"
						},
						"4": {
							"name": "punctuation.paren.open"
						},
						"5": {
							"name": "constant.numeric.skinparam.keyword.source.wardleymap"
						},
						"6": {
							"name": "punctuation.paren.open"
						},
						"7": {
							"name": "constant.numeric.skinparam.keyword.source.wardleymap"
						},
						"8": {
							"name": "punctuation.paren.open"
						},
						"9": {
							"name": "constant.numeric.skinparam.keyword.source.wardleymap"
						},
						"10": {
							"name": "punctuation.paren.open"
						}
					}
				},
				{
					"match": "(url)(\\s*[a-zA-Z0-9\\s*]+)(\\s*\\[)(\\s*[-+'\"/;:.#a-zA-Z0-9\\s*]+)(\\])",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "entity.name.function"
						},
						"3": {
							"name": "punctuation.paren.open"
						},
						"4": {
							"name": "comment"
						},
						"5": {
							"name": "punctuation.paren.open"
						}
					}
				},
				{
					"match": "(url)(\\s*\\()(\\s*[-+'\"/;:a-zA-Z0-9\\s*]+)(\\))",
					"captures": {
						"1": {
							"name": "storage.type"
						},
						"2": {
							"name": "punctuation.paren.open"
						},
						"3": {
							"name": "entity.name.function"
						},
						"4": {
							"name": "punctuation.paren.open"
						}
					}
				},
				{
					"match": "(\\s*\\()([-+(build|buy|outsource|market|inertia)\\s*]+)(\\))",
					"captures": {
						"1": {
							"name": "punctuation.paren.open"
						},
						"2": {
							"name": "storage.type"
						},
						"3": {
							"name": "punctuation.paren.open"
						}
					}
				},
				{
					"match": "(\\/\\/.*$)",
					"captures": {
						"1": {
							"name": "comment"
						}
					}
				},
				{
					"begin": "\\/\\*",
					"end": "\\*\\/",
					"name": "comment"
				}
		]
		},
		"strings": {
			"name": "string.quoted.double.wardleymap",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.wardleymap",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.wardleymap"
}
